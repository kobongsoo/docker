1) github 계정 생성
2) VM 로그인, 작업 디렉토리 생성

mkdir work
cd work

3) 계정 설정

git config --global user.name "bong9431"
git config --global user.email "bong9431@empas.com"
git config --global --list

4-1) ssh키 설정 & git clone

ssh-keygen
cat ~/.ssh/id_rsa.pub

화면의 내용을 전부 복사해서 gitlab의 Settings-SSH Keys에 붙임 

git clone git@github.com:weable72/kosa-saas-2023-5th.git

Are you sure you want to continue connecting (yes/no/[fingerprint])? 나오면 yes 입력

4-2) github token 설정 & git clone

https clone시에는 token 설정, repo 관련 모든 권한 할당

git clone https://[사용자 id]:[access token]@github.com/weable72/kosa-saas-2023-5th.git 

5) 작업하고 git add; git commit; git push

git pull / git configpull.rebase false
git add 'test.txt' / git add --all
git commit -m 'add test.txt' 
git push

6) 작업 전 항상 git pull (본인 폴더만 작업)


히스토리 파일로 저장
history > 파일명

리눅스 버전 확인
cat /etc/*release*

권한 확인
whoami

==================================================================================
[docker 설치 과정]-

1) docker 설치
get.docker.com 스크립트 이용
- root 권한으로 전환( sudo su - root) 후 실행해야 함

1. download the script
curl -fsSL https://get.docker.com -o install-docker.sh  //install-docker.sh 파일 다운로드 

2. verify the script's content
cat install-docker.sh                   // install-docker.sh 파일 확인 (pass해도 됨)

3. run the script with --dry-run to verify the steps it executes
$ sh install-docker.sh --dry-run           // install-docker.sh 테스트로 실행과정 진행해봄(설치는 안됨)(pass해도 됨)

4. run the script either as root, or using sudo to perform the installation.
sh install-docker.sh                     // install-docker.sh 실제 설치

2) docker 실행 확인
docker -v
docker ps

3) docker 실행
docker run -it centos:7

docker 실행 확인
docker ps -a

docker 이미지 확인
docker image ls

docker 모두 종료
docker rm -f $(docker ps -a -q)

docker 설치 로그 보기
docker logs name

docker 볼륨 확인
docker volume ls

==================================================================================
[docker 이미지 설치 실습]

https://hub.docker.com/ 사이트에서 docker 이미지를 검색해서 설치하는것 테스트 해봄

실습1) docker로 볼륨을 붙여서 joomla + mysql을 실행한다(실습) -> 다시 시작시 재설치 하지 않음 확인
mysql 설치

docker run -d --name joomla_db \
-e MYSQL_ROOT_PASSWORD=password \
-e MYSQL_DATABASE=joomla_db \
-v /data/joomla_db:/var/lib/mysql \
mysql:5.7

joomla 설치
docker run -d --name joomla -p 80:80 \
--link joomla_db:mysql \
-e JOOMLA_DB_HOST=joomla_db \
-e JOOMLA_DB_USER=root \
-e JOOMLA_DB_PASSWORD=password \
-e JOOMLA_DB_NAME=joomla_db \
-v /data/joomla_web:/var/www/html \
joomla:4.3

실습2) docker로 볼륨을 붙여서 drupal + postgres를 실행한다(실습) -> 다시 시작시 재설치 하지 않음 확인
postgres 설치

docker run -d --name postgres-db \
    -e POSTGRES_DB=drupal \
    -e POSTGRES_USER=user \
    -e POSTGRES_PASSWORD=pass \
    -v /home/drupal_db:/var/lib/postgresql/data \
postgres:11

drupal 설치

// 볼륨생성
docker volume create drupal-sites
docker run --rm -v drupal-sites:/temporary/sites drupal:9 cp -aRT /var/www/html/sites /temporary/sites

docker run --name my-drupal -d -p 80:80 --link postgres-db:my-db \
    -v drupal-modules:/var/www/html/modules \
    -v drupal-profiles:/var/www/html/profiles \
    -v drupal-sites:/var/www/html/sites \
    -v drupal-themes:/var/www/html/themes \
drupal:9
